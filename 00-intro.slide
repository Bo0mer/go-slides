Introduction to Go

Ivan Borshukov
SAP Labs Bulgaria
ivan.borshukov@sap.com
https://botu6.blogspot.com
@botu6aa

* History

- *2007* Idea is born @Google, Robert Griesemer, Rob Pike, Ken Thompson
- *2008* Compilator implementation is started
- *2009* First public release
- *2010* Language of the year
- *2011* Used in production by Google
- *2012* Go 1.0
- *2013* 1.1 & 1.2
- *2014* 1.3 & 1.4
- *2015* 1.5
- *2016* 1.6 & 1.7

* Language Design

- Open source low-level language
- Recognizably in the tradition of C
- Built-in concurrency primitives
- Very fast compilation
- Scalable to large systems
- Simple
- UTF-8 by default

* Criticisms

- Lack of compile-time generics
- No inheritance
- GC
- Lack of extenisbility (no method overloading, default parameters, ...)

* Hello, world

.play code/00/hello_world.go

* Packages

- Code is organized into packages
- One package - many files (make use of that)
- One directory - one package (excl. tests)
- One file - exactly one package

* Import

- Each package is compiled *exactly* once
- Non-used imports lead to compile-time errors 

* Visibility
- Exported (start with Upper-case letter)
- private (start with lower-case letter)
- That's it.

* Basic types

- bool
- integer
- float64
- complex
- string
- array
- struct
- channel

* Architecture independent

- int8
- int16
- int32
- int64

- uint8
- uint16
- uint32
- uint64

* !Architecture independent
- int
- uint

* Default values 

.play code/00/default_values.go

* Casting

- No surpise here
  var i int = 42
  var f float32 = float32(i)

- No implicit casts
  var fi float32 = f * i // compile-time error

* if, for, switch

.play code/00/control.go

* Functions

- First class object
- Can have multiple return values
    func nextInt(b []byte, i int) (int, int) {
        for ; i < len(b) && !isDigit(b[i]); i++ {        
        }
        x := 0
        for ; i < len(b) && isDigit(b[i]); i++ {
            x = x*10 + int(b[i]) - '0'
        }
    }
- Lambdas
- Clojures

* Data structures
- Arrays
- Slices
.play code/00/slices.go

* Data structures
- Maps
.play code/00/maps.go

* Data structures
- new() vs make()
    var p *[]int = new([]int)       // allocates slice structure; *p == nil; rarely useful
    var v  []int = make([]int, 100) // the slice v now refers to a new array of 100 ints

    // Unnecessarily complex:
    var p *[]int = new([]int)
    *p = make([]int, 100, 100)

    // Idiomatic:
    v := make([]int, 100)

* Concurrency (Goroutines)

- Independently executing function
- Very very lightweight
- Not a thread. Goroutines are mapped to OS threads by a scheduler.

.play code/00/go.go

- But where is my message?

* Concurrency (Channels)

- Communication between Goroutines
- Synchronization
- Special syntax
- First class objects

.play code/00/channels.go

* Types

- User defined types
    type Person struct{
        Age  int
        Name string
    } 
- Methods
    func (p *Person) Greet() {
        fmt.Println("Hello, I'm", p.Name)
    }
- Methods are applied to concrete types (receiver)
- Define the behaviour of the type

* Interfaces

- Abstract type - cannot create objects of interface type 
- Abstract type - can have variables of such type
- First class objects
- Satisfied implicitly
    type Greeter interface {
        Greet()
    }

* Interfaces

.play code/00/iface.go
