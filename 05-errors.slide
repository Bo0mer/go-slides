Error handling in Go

Ivan Borshukov
Chaos Group
ivan.borshukov@chaosgroup.com
@borshukov

* Agenda
- Types of errors
- Adding context information
- Error handling techniques
- Q&A

* What are errors

    // The error built-in interface type is the conventional interface for
    // representing an error condition, with the nil value representing no error.
    type error interface {
        Error() string
    }

Errors are values

- Carried by an interface type
- Representing error condition

* Handling errors

Option 1

    result, err := operationThatCanFail()
    if err != nil {
         // Handle error.
    }

Option 2

    yolo, _ := operationThatCanFail()
    // ¯\_(ツ)_/¯

* Sentinel errors

    package io

    // EOF is the error returned by Read when no more input is available. ...
    var EOF = errors.New("EOF")

- Signal specific condition, e.g. `io.EOF`, `syscall.ENOENT`
- Caller must compare the result to exact predeclared value
- Need to be exported, thus become part of the package's API
- Create a dependency between two packages
- Error values can be changed

.play -edit code/05/io.go /START OMIT/,/END OMIT/

* Constant errors

.code code/05/constio.go /START OMIT/,/END OMIT/

- They are immutable

.play -edit code/05/constio1.go /START OMIT/,/END OMIT/

- Error values with the same contents are equal

.play -edit code/05/constio2.go /START OMIT/,/END OMIT/

* Error types

    package url

    // Error reports an error and the operation and URL that caused it.
    type Error struct {
        Op  string
        URL string
        Err error
    }

    func (e *Error) Error() string { return e.Op + " " + e.URL + ": " + e.Err.Error() }

- Type that implements the error interface
- Allow wrapping underlying errors and providing more context
- Need to be exported, thus become part of the package's API

* Error types

- Requires type assertion to extract extra context from the error

    func isDeadlineExceeded(err error) bool {
        if v, ok := err.(*url.Error); ok {
            if v.Err == context.DeadlineExceeded {
                return true
            }
        }
        return false
    }

* Opaque errors

- You know nothing but that an error have occurred
- Just return the error without assuming anything about its contents

    import “github.com/pkg/foo”

    func fn() error {
            val, err := foo.Foo()
            if err != nil {
                    return err
            }
            // use val
    }

- Foo's author has the flexibility to change concrete return values or add annotation

* Acting on specific opaque errors

- Assert behaviour, not value or type

.play -edit code/05/temp.go /START OMIT/,/END OMIT/


- Does not introduce pacakge dependency
- Can be used with net, net/http, net/url, context, etc.

* Provoding context by annotating errors values

* Why?

.image img/no_such_file_error.png _ 480

* Donovan and Kernighan’s The Go Programming Language way

- Using fmt.Errorf

.play -edit code/05/annotate1.go /START OMIT/,/END OMIT/

- Incompatible with the use of sentinel error values or type assertions
- Destroys the original error and any context associated with it
- No stacktrace or Go source file information

* Dave Cheney's way

- Using github.com/pkg/errors

.play -edit code/05/annotate2.go /START OMIT/,/END OMIT/

- Provides stacktrace and Go source file information
- Preservers the origina error

.play -edit code/05/annotate3.go /START OMIT/,/END OMIT/

* Error handling techniques

* Handling multiple errors

- Naive way

    _, err = fd.Write(p0[a:b])
    if err != nil {
        return err
    }
    _, err = fd.Write(p1[c:d])
    if err != nil {
        return err
    }
    _, err = fd.Write(p2[e:f])
    if err != nil {
        return err
    }
    // and so on

* Handling multiple errors

.image img/errors_in_go.png _ 660

.caption Image from https://imgur.com/WnpMFjX

* Handling multiple errors

- Using closures

    var err error
    write := func(buf []byte) {
        if err != nil {
            return
        }
        _, err = w.Write(buf)
    }
    write(p0[a:b])
    write(p1[c:d])
    write(p2[e:f])
    // and so on
    if err != nil {
        return err
    }

- Requires all work to be done in a single function

* Handling multiple errors

- Lifting state up

    type errWriter struct {
        w   io.Writer
        err error
    }

    func (ew *errWriter) write(buf []byte) {
        if ew.err != nil {
            return
        }
        _, ew.err = ew.w.Write(buf)
    }

Usage:

    ew := &errWriter{w: fd}
    ew.write(p0[a:b])
    ew.write(p1[c:d])
    ew.write(p2[e:f])
    if ew.err != nil {
        return ew.err
    }

* Handling 'defered' errors

.code -numbers code/05/strategies/multiple/main.go /START OMIT/,/END OMIT/

    $ errcheck -verbose ./...
    main.go:14:16:	(*os.File).Close	defer fd.Close()

What could possibly go wrong

- calling Close twice
- resource leak

* Handling 'defered' errors

- Using named return values

.code code/05/strategies/multiple/ex2.go /START OMIT/,/END OMIT/

* Whatever you do, always check your errors!

* Q&A

Any qestions?
